**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## Essentials

### PassengerRoot

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerRoot <em>dir-path</em></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>1.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config</td>
  </tr>
</table>

Refers to the location to the Passenger root directory, or to a location configuration file. This configuration option is essential to Passenger, and allows Passenger to locate its own data files.

You normally do not need to set this configuration option. If you used our [Debian](<%= url_for "/install/apache/apt_repo.html" %>) or [RPM](<%= url_for "/install/apache/yum_repo.html" %>) packages to [install Passenger](<%= url_for "/install/apache/install/index.html" %>), then they automatically configure `PassengerRoot` for you with the right value. If you installed Passenger from Homebrew, tarball or RubyGems, then at some point during the installation process you are told what the correct value should be, and instructed to insert it into your Apache configuration file.

#### What happens if this option is not set, or set wrongly

If you do not set `PassengerRoot`, then Passenger will complain about it and prevent Apache from starting.

If you set `PassengerRoot` to the wrong value, then Passenger will attempt to locate some of its own files, fail to do so, then complain with an error message and abort Apache.

#### How to fix PassengerRoot

If you lost the PassengerRoot configuration value (e.g. because you accidentally removed the Apache configuration file, and you are trying to reconstruct it), if you didn't follow the installation instructions correctly, or if you [moved Passenger to a different directory](<%= url_for "/install/apache/moving.html" %>), then you can fix PassengerRoot as follows.

The correct value for PassengerRoot can be obtained as follows:

 * If you installed Passenger through source tarball or by cloning it from the Passenger Github repository, then the value should be the path to the Passenger directory.
 * In all other cases, obtain the correct value by running the following command:

       passenger-config --root

Once you have obtained the value, [open your Apache configuration file](<%= url_for "/install/apache/working_with_the_apache_config_file.html" %>) and insert a `PassengerRoot` option somewhere with that value.


### PassengerDefaultRuby

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerDefaultRuby <em>file-path</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerDefaultRuby ruby</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config</td>
  </tr>
</table>

This option specifies:

 * which Ruby interpreter Passenger should use for its internal Ruby helper tools, e.g. the one used by [PassengerPreStart](#passengerprestart). See [Lightweight Ruby dependency](<%= url_for "/indepth/lightweight_ruby_dependency.html" %>) for more information.
 * the default Ruby interpreter to use for Ruby web apps. Naturally, this is not applicable if you do not use Passenger to serve Ruby web apps. Please see [PassengerRuby](#passengerruby) for more information, as well as how it relates to PassengerDefaultRuby.

The default value is `ruby`, meaning that the Ruby interpreter will be looked up according to [the PATH environment variable](<%= url_for "/indepth/environment_variables.html" %>#the-path-environment-variable).

If you want to specify the Ruby interpreter to use for serving a specific Ruby web application, then we recommend that you use the [PassengerRuby](#passengerruby) configuration option instead of `PassengerDefaultRuby`. While `PassengerDefaultRuby` specifies a default value for `PassengerRuby`, the main reason why `PassengerDefaultRuby` exists is to specify which Ruby interpreter to use for internal Ruby helper tools.

If you installed Passenger through source tarball or RubyGems, then you should know that it is okay if `PassengerDefaultRuby` refers to a different Ruby interpreter than the one you used originally installed Passenger with. Please learn more at [How having multiple Ruby interpreters affects Passenger](<%= url_for "/indepth/multiple_rubies.html" %>).


## Deployment options

### PassengerEnabled

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerEnabled <em>on|off</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerEnabled on</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
</table>

This option enables or disables Passenger for that particular context. Passenger is enabled by default. You can set this option to `off` to completely disable Passenger for that context. This option is useful if, for example, you want a certain location to be handled by a different Apache module, not by Passenger.

#### Example

Suppose that you have a Ruby application in `/apps/foo`. Suppose that you've dropped Wordpress -- a blogging application written in PHP -- in `/apps/foo/public/wordpress`. You want can then configure Passenger as follows so that Passenger doesn't interfere with the Wordpress installation:

<div>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /apps/foo/public
    &lt;Directory /apps/foo/public/wordpress&gt;
        PassengerEnabled off
        <span class="c"># Makes Wordpress's .htaccess file work</span>
        AllowOverride all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>


### PassengerBaseURI

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerBaseURI <em>uri</em></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

<!-- TODO: write guide for sub-URI deployments -->
Used to specify that the given URI is an distinct application that should be served by Passenger. Please see [the deployment guide](<%= url_for "/deploy/apache/index.html" %>) for more information.


## Application loading options

### PassengerRuby

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerRuby <em>path-to-ruby-interpreter</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerRuby <em>(value of PassengerDefaultRuby)</em></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

The `PassengerRuby` option specifies the Ruby interpreter to use for serving Ruby web applications. If `PassengerRuby` is not specified, then it defaults to the value of [PassengerDefaultRuby](#passengerdefaultruby) (which in itself defaults to `ruby`, meaning the first `ruby` command found in [PATH](<%= url_for "/indepth/environment_variables.html" %>#the-path-environment-variable)).

Closely related to `PassengerRuby` is [PassengerPython](#passengerpython), [PassengerNodejs](#passengernodejs), etc. The following example illustrates how it works and how you can use these options to specify different interpreters for different web apps.

<%= render_partial("/config/reference/apache/passenger_ruby_example.md", locals: locals) %>

<%= render_partial("/config/reference/passenger_ruby_extra_info.md", locals: locals) %>


### PassengerPython

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerPython <em>path-to-python-interpreter</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerPython <em>python</em></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

This option specifies the Python interpreter to use for serving Python web applications. If it is not specified, then it uses the first `python` command found in [PATH](<%= url_for "/indepth/environment_variables.html" %>#the-path-environment-variable).

Closely related to this option is [PassengerRuby](#passengerruby), [PassengerNodejs](#passengernodejs), etc. The following example illustrates how it works and how you can use these options to specify different interpreters for different web apps.

<%= render_partial("/config/reference/apache/passenger_ruby_example.md", locals: locals) %>


### PassengerNodejs

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerNodejs <em>path-to-node-js</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerNodejs <em>node</em></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.24</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

This option specifies the Node.js/io.js command to use for serving Node.js/io.js web applications. If it is not specified, then it uses the first `node` command found in [PATH](<%= url_for "/indepth/environment_variables.html" %>#the-path-environment-variable).

Passenger's support for Node.js and io.js are the same. If you want to use io.js instead of Node.js, simply set this option to your iojs binary.

Closely related to this option is [PassengerRuby](#passengerruby), [PassengerPython](#passengerpython), etc. The following example illustrates how it works and how you can use these options to specify different interpreters for different web apps.

<%= render_partial("/config/reference/apache/passenger_ruby_example.md", locals: locals) %>


### PassengerMeteorAppSettings

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerMeteorAppSettings <em>path-to-json-settings-file</em></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>5.0.7</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

When using a Meteor application in non-bundled mode, use this option to specify a JSON file with settings for the application. The `meteor run` command will be run with the `--settings` parameter set to this option.

Note that this option is not intended to be used for bundled/packaged Meteor applications. When running bundled/packaged Meteor applications on Passenger, you should set the `METEOR_SETTINGS` environment variable using [SetEnv](http://httpd.apache.org/docs/2.4/mod/mod_env.html#setenv).


### PassengerAppEnv

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerAppEnv <em>name</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerAppEnv production</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

This option sets, for the current application, the value of the following environment variables:

 * `RAILS_ENV`
 * `RACK_ENV`
 * `WSGI_ENV`
 * `NODE_ENV`
 * `PASSENGER_APP_ENV`

Some web frameworks, for example Rails and Connect.js, adjust their behavior according to the value in one of these environment variables.

Passenger sets the default value to **production**. If you're developing the application (instead of running it in production), then you should set this to `development`.

If you want to set other environment variables, please use [SetEnv](http://httpd.apache.org/docs/2.4/mod/mod_env.html#setenv).

Setting this option also adds the application environment name to the default [application group name](#passengerappgroupname), so that you can run multiple versions of your application with different application environment names.


### RailsEnv, RackEnv

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>
      RailsEnv <em>name</em><br>
      RackEnv <em>name</em>
    </td>
  </tr>
  <tr>
    <th>Default</th>
    <td>
      RailsEnv production<br>
      RackEnv production
    </td>
  </tr>
  <tr>
    <th>Since</th>
    <td>2.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

These are aliases for [PassengerAppEnv](#passengerappenv).


### PassengerAppRoot

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerAppRoot <em>path</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerAppRoot <em>parent-directory-of-DocumentRoot</em></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

By default, Passenger assumes that the application's root directory is the parent directory of the DocumentRoot. This option allows one to the application's root independently from the DocumentRoot, which is useful if your application does not follow the conventions that Passenger assumes.

See also [How Passenger + Apache autodetects applications](<%= url_for "/indepth/app_autodetection/apache/index.html" %>).

#### Example

<div>
  <pre class="highlight">&lt;VirtualHost test.host&gt;
    DocumentRoot /var/rails/zena/sites/example.com/public
    <span class="c"># Normally Passenger would have assumed that the
    # application root is "/var/rails/zena/sites/example.com".
    # This overrides it.</span>
    PassengerAppRoot /var/rails/zena
&lt;/VirtualHost&gt;</pre>
</div>


### PassengerAppGroupName

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerAppGroupName <em>name</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>See description</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

Sets the name of the application group that the current application should belong to. Its default value is the [application root](#passengerapproot), plus (if it is explicitly set), the [application environment name](#passengerappenv).

Passenger stores and caches most application spawning settings -- such as environment variables, process limits, etc -- on a per-app-group-name basis. This means that if you want to start two versions of your application, with each version having different environment variables, then you must assign them under different application group names.

The [request queue](<%= url_for "/indepth/request_queuing.html" %>) is also per-application group, so creating multiple application groups allow you to separate requests into different queues.

#### Example

Consider a situation in which you are running multiple versions of the same app, with each version intended for a different customer. You use the `CUSTOMER_NAME` environment variable to tell the app which customer that version should serve.

<div>
  <pre class="highlight"><span class="c"># WRONG example! Doesn't work!</span>

&lt;VirtualHost *:80&gt;
    ServerName customer1.foo.com
    DocumentRoot /webapps/foo/public
    SetEnv CUSTOMER_NAME customer1
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName customer2.foo.com
    DocumentRoot /webapps/foo/public
    SetEnv CUSTOMER_NAME customer2
&lt;/VirtualHost&gt;</pre>
</div>

This example doesn't work, because Passenger thinks that they are the same application. When a user visits customer1.foo.com, Passenger will start a process with `CUSTOMER_NAME=customer1`. When another user visits customer2.foo.com, Passenger will route the request to the application process that was started earlier. Because environment variables are only set during application process startup, the second user will be served the website for customer 1.

To make this work, assign unique application group names:

~~~
<VirtualHost *:80>
    ServerName customer1.foo.com
    DocumentRoot /webapps/foo/public
    SetEnv CUSTOMER_NAME customer1
    PassengerAppGroupName foo_customer1
</VirtualHost>

<VirtualHost *:80>
    ServerName customer2.foo.com
    DocumentRoot /webapps/foo/public
    SetEnv CUSTOMER_NAME customer2
    PassengerAppGroupName foo_customer2
</VirtualHost>
~~~

Note that it is not necessary to set `PassengerAppGroupName` if you want to run two versions of your application under different [application environment names](#passengerappenv), because the application environment name is included in the default application group name. For example, consider a situation in which you want to run a production and a staging version of your application. The following configuration will work fine:

<div>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName bar.com
    DocumentRoot /webapps/bar/public
    <span class="c"># Phusion Passenger implicitly sets:
    # PassengerAppGroupName /webapps/bar</span>
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName staging.bar.com
    DocumentRoot /webapps/bar/public
    PassengerAppEnv staging
    <span class="c"># Phusion Passenger implicitly sets:
    # PassengerAppGroupName '/webapps/bar (staging)'</span>
&lt;/VirtualHost&gt;</pre>
</div>


### PassengerAppType

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerAppType <em>name</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td><a href="<%= url_for "/indepth/app_autodetection/apache/index.html" %>">Autodetected</a></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.25</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

By default, Passenger [autodetects](<%= url_for "/indepth/app_autodetection/apache/index.html" %>) the type of the application, e.g. whether it's a Ruby, Python, Node.js or Meteor app. If it's unable to autodetect the type of the application (e.g. because you've specified a custom [PassengerStartupFile](#passengerstartupfile)) then you can use this option to force Passenger to recognize the application as a specific type.

Allowed values are:

<table class="table table-bordered table-striped">
  <thead>
    <th>Value</th>
    <th>Application type</th>
  </thead>
  <tbody>
    <% SUPPORTED_APP_TYPES.each do |spec| %>
      <tr>
        <td><%= spec[:type] %></td>
        <td><%= spec[:name] %></td>
      </tr>
    <% end %>
  </tbody>
</table>

If you set this option, then you **must** also set [PassengerAppRoot](#passengerapproot), otherwise Passenger will not properly recognize your application.

#### Example

<div>
  <pre class="highlight">&lt;VirtualHost test.host&gt;
    DocumentRoot /webapps/example.com/public
    <span class="c"># Use server.js as the startup file (entry point file) for
    # your Node.js application, instead of the default app.js</span>
    PassengerStartupFile server.js
    PassengerAppType node
    PassengerAppRoot /webapps/example.com
&lt;/VirtualHost&gt;</pre>
</div>


### PassengerStartupFile

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerStartupFile <em>relative-path</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td><a href="<%= url_for "/indepth/app_autodetection/apache/index.html" %>">Autodetected</a></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.25</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

This option specifies the startup file that Passenger should use when loading the application. This path is relative to the [application root](#passengerapproot).

Every application has a *startup file* or *entry point file*: a file where the application begins execution. Some languages have widely accepted conventions about how such a file should be called (e.g. Ruby, with its `config.ru`). Other languages have somewhat-accepted conventions (e.g. Node.js, with its `app.js`). In these cases, Passenger reuses these conventions, and executes applications through those files.

Other languages have no conventions at all, and so Passenger invents one (e.g. Python WSGI with `passenger_wsgi.py`).

Here's a list of the language-specific conventions that Phusion Passenger accepts:

<table class="table table-striped table-bordered">
  <thead>
    <tr>
      <th>Language</th>
      <th>Passenger convention</th>
    </tr>
  </thead>
  <tbody>
    <% SUPPORTED_APP_TYPE_CONVENTIONS.each do |spec| %>
      <tr>
        <td><%= spec[:name] %></td>
        <td><%= spec[:startup_file] %></td>
      </tr>
    <% end -%>
  </tbody>
</table>

Sometimes you might not want to adhere to the convention that Passenger accepts. For example, on Node.js, you might want to use `server.js` as the startup file instead of the default `app.js`. With this option, you can customize the startup file to any file you like.

#### Notes

 * Customizing the startup file affects [user account sandboxing](<%= url_for "/deploy/apache/user_sandboxing.html" %>). After all, if user account sandboxing is enabled, the application is executed as the user that owns the startup file.
 * If you set this option, you **must** also set [PassengerAppRoot](#passengerapproot) and [PassengerAppType](#passengerapptype), otherwise Passenger doesn't know what kind of application it is.

#### Example

<div>
  <pre class="highlight">&lt;VirtualHost test.host&gt;
    DocumentRoot /webapps/example.com/public
    <span class="c"># Use server.js as the startup file (entry point file) for
    # your Node.js application, instead of the default app.js</span>
    PassengerStartupFile server.js
    PassengerAppType node
    PassengerAppRoot /webapps/example.com
&lt;/VirtualHost&gt;</pre>
</div>


### PassengerRestartDir

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerRestartDir <em>absolute-or-relative-path</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerRestartDir tmp</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>3.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

<!-- TODO: link to restart.txt description -->
As described in the deployment chapters of this document, Passenger checks the file `tmp/restart.txt` in the [application root directory](#passengerapproot) to determine whether it should restart the application. Sometimes it may be desirable for Passenger to look in a different directory instead, for example for security reasons (see below). This option allows you to
customize the directory in which `restart.txt` is searched for.

You can either set it to an absolute directory, or to a directory relative to the [application root](#passengerapproot).

#### Examples

<div>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    <span class="c"># Phusion Passenger will check for /apps/foo/public/tmp/restart.txt</span>
    DocumentRoot /apps/foo/public
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName www.bar.com
    DocumentRoot /apps/bar/public
    <span class="c"># An absolute filename is given; Passenger will
    # check for /restart_files/bar/restart.txt</span>
    PassengerRestartDir /restart_files/bar
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName www.baz.com
    DocumentRoot /apps/baz/public
    <span class="c"># A relative filename is given; Passenger will
    # check for /apps/baz/restart_files/restart.txt
    #
    # Note that this directory is relative to the APPLICATION ROOT, *not*
    # the value of DocumentRoot!</span>
    PassengerRestartDir restart_files
&lt;/VirtualHost&gt;</pre>
</div>

#### Security reasons for wanting to customize PassengerRestartDir

Touching restart.txt will cause Passenger to restart the application. So anybody who can touch restart.txt can effectively cause a Denial-of-Service attack by touching restart.txt over and over. If your web server or one of your web applications has the permission to touch restart.txt, and one of them has a security flaw which allows an attacker to touch restart.txt, then that will allow the attacker to cause a Denial-of-Service.

You can prevent this from happening by pointing PassengerRestartDir to a directory that's readable by Apache, but only writable by administrators.


### PassengerSpawnMethod

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerSpawnMethod <em>smart|direct</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>
      For Ruby apps: PassengerSpawnMethod smart<br>
      For other apps: PassengerSpawnMethod direct
    </td>
  </tr>
  <tr>
    <th>Since</th>
    <td>2.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host</td>
  </tr>
</table>

This option controls whether Passenger spawns applications directly, or using a prefork copy-on-write mechanism. The [spawn methods guide](<%= url_for "/indepth/spawn_methods.html" %>) explains this in detail.


### PassengerLoadShellEnvvars

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerLoadShellEnvvars <em>on|off</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerLoadShellEnvvars on</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.20</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

Enables or disables the loading of shell environment variables before spawning the application.

If this option is turned on, and the user's shell is `bash`, then applications are loaded by running them with `bash -l -c`. The benefit of this is that you can specify environment variables in .bashrc, and they will appear in the application as one would expect.

If this option is turned off, applications are loaded by running them directly from the `Passenger core` process.


### PassengerRollingRestarts

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerRollingRestarts <em>on|off</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerRollingRestarts off</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>3.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
  <%= render_partial("/config/reference/enterprise_only.html") %>
</table>

Enables or disables support for [zero-downtime application restarts](<%= url_for "/deploy/apache/zero_downtime_redeployments.html" %>) through `restart.txt`. Normally, when you [restart an application](<%= url_for "/admin/apache/restart_app.html" %>) through `restart.txt`, Passenger would shut down all processes for that application and spawn a new one. The spawning of a new application process could take a while, and any requests that come in during this time will be blocked until this first application process has spawned, which users may experience as "downtime".

But when rolling restarts are enabled, Passenger Enterprise will:

 1. Spawn a new process in the background.
 2. When it's done spawning, Passenger Enterprise will replace one of the old processes with this newly spawned one.
 3. Step 1 and 2 are repeated until all processes have been replaced.

This way, visitors will not experience any delays when you are restarting your application. This allows you to, for example, deploy application updates often without degrading user experience.

Rolling restarts have a few caveat however that you should be aware of:

 * Upgrading an application sometimes involves upgrading the database schema. With rolling restarts, there may be a point in time during which processes belonging to the previous version and processes belonging to the new version both exist at the same time. Any database schema upgrades you perform must therefore be backwards-compatible with the old application version.
 * Because there's no telling which process will serve a request, users may not see changes brought about by the new version until all processes have been restarted. It is for this reason that you should not use rolling restarts in development, only in production.

If Passenger Enterprise could not rolling restart a process (let's call it 'A') because it is unable to spawn a new process (let's call it 'B'), then Passenger Enterprise will give up trying to rolling restart that particular process 'A'. What happens next depends on whether [deployment error resistance](#passengerresistdeploymenterrors) is enabled:

 * If deployment error resistance is disabled (the default), then Passenger Enterprise will proceed with trying to restart the remaining processes.
 * If deployment error resistance is enabled, the Passenger Enterprise will give up rolling restarting immediately. The application group will be put into Deployment Error Resistance Mode.

Please note that `PassengerRollingRestarts` is completely unrelated to the `passenger-config restart-app` command. That command always initiates a blocking restart, unless `--rolling-restart` is given.

NOTE: Are you looking to prevent applications from being restarted when you restart Apache? That is handled by the [Flying Passenger mode](<%= url_for "/deploy/apache/flying_passenger.html" %>), not by the rolling restarts feature.


### PassengerResistDeploymentErrors

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerResistDeploymentErrors <em>on|off</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerResistDeploymentErrors off</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>3.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
  <%= render_partial("/config/reference/enterprise_only.html") %>
</table>

Enables or disables [resistance against deployment errors](<%= url_for "/deploy/apache/deployment_error_resistance.html" %>).

Suppose that you have upgraded your application and you have issued a command to restart it, but the application update contains an error (e.g. a syntax error or a database configuration error) that prevents Passenger from successfully spawning a process. Passenger would normally display an error message to the visitor in response to this.

By enabling deployment error resistance, Passenger Enterprise would "freeze" the application's process list. Existing application processes (belonging to the previous version) will be kept around to serve requests. The error is [logged](<%= url_for "/admin/#{integration_mode_type}/log_file.html" %>), but visitors do not see any error messages. Passenger keeps the old processes around until an administrator has taken action. This way, visitors will suffer minimally from deployment errors.

[Learn more about this feature in Deployment Error Resistance guide](<%= url_for "/deploy/apache/deployment_error_resistance.html" %>).

Note that enabling deployment error resistance only works if you perform a [rolling restart instead of a blocking restart](<%= url_for "/admin/apache/restart_app.html" %>#blocking-restart-vs-zero-down-time-restart-(rolling-restart)).


## Security options

### PassengerUserSwitching

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerUserSwitching <em>on|off</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerUserSwitching on</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>2.2.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config</td>
  </tr>
</table>

Whether to attempt to enable [user account sandboxing](<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>), also known as user switching.

<div class="note">
  This option has no effect when you are using <a href="<%= url_for "/deploy/#{integration_mode_type}/flying_passenger.html" %>">Flying Passenger</a>. You can disable user account sandboxing for Flying Passenger by starting the Flying Passenger daemon as a non-root user.
</div>

<div class="warning">
  If you're on Red Hat or CentOS, be sure to read <a href="<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>#red-hat-and-centos-caveats">the Red Hat and CentOS user account sandboxing caveats</a>.
</div>


### PassengerUser

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerUser <em>username</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>See the <a href="<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>">user account sandboxing rules</a></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory</td>
  </tr>
</table>

If [user account sandboxing](<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>) (also known as user switching) is enabled, then Passenger will by default [run the web application as the owner of the application's startup file](<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>#how-it-works). `passenger_user` allows you to override that behavior and explicitly set a user to run the web application as, regardless of the ownership of the startup file.


### PassengerGroup

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerGroup <em>groupname</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>See the <a href="<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>">user account sandboxing rules</a></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory</td>
  </tr>
</table>

If [user account sandboxing](<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>) (also known as user switching) is enabled, then Passenger will by default [run the web application as the primary group of the owner of the application's startup file](<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>#how-it-works). `passenger_group` allows you to override that behavior and explicitly set a group to run the web application as, regardless of the ownership of the startup file.

The value may also be set to the special value `!STARTUP_FILE!`, in which case the web application's group will be set to the startup file's group.


### PassengerDefaultUser

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerDefaultUser <em>username</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>PassengerDefaultUser <em>nobody</em></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>3.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config</td>
  </tr>
</table>

Passenger enables [user account sandboxing](<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>) (also known as user switching) by default. This configuration option allows you to specify the user that applications must
run as, if user switching fails or is disabled.

<div class="note">
  This option has no effect when you are using <a href="<%= url_for "/deploy/#{integration_mode_type}/flying_passenger.html" %>">Flying Passenger</a>. You can disable user account sandboxing for Flying Passenger by starting the Flying Passenger daemon as a non-root user.
</div>


### PassengerDefaultGroup

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerDefaultGroup <em>username</em></td>
  </tr>
  <tr>
    <th>Default</th>
    <td>See description</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>3.0.0</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config</td>
  </tr>
</table>

Passenger enables [user account sandboxing](<%= url_for "/deploy/#{integration_mode_type}/user_sandboxing.html" %>) (also known as user switching) by default. This configuration option allows you to specify the group that applications must
run as, if user switching fails or is disabled.

The default value is the primary group of the user specifified by [passenger_default_user](#passenger_default_user). So the default value on most systems is `nobody` or `nogroup`.

<div class="note">
  This option has no effect when you are using <a href="<%= url_for "/deploy/#{integration_mode_type}/flying_passenger.html" %>">Flying Passenger</a>. You can disable user account sandboxing for Flying Passenger by starting the Flying Passenger daemon as a non-root user.
</div>


### PassengerFriendlyErrorPages

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>PassengerFriendlyErrorPages <em>on|off</em></td>
  </tr>
  <tr>
    <th>Default (as of 4.0.42)</th>
    <td>
      <p>
        <em>When <a href="#passengerappenv">PassengerAppEnv</a> is <code>staging</code> or <code>production</code>:</em><br>
        PassengerFriendlyErrorPages off;
      </p>
      <p>
        <em>Otherwise:</em><br>
        PassengerFriendlyErrorPages on;
      </p>
    </td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.42</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Context">Context</a></th>
    <td>server config, virtual host, directory, .htaccess</td>
  </tr>
  <tr>
    <th><a href="http://httpd.apache.org/docs/2.4/mod/directive-dict.html#Override">Override</a></th>
    <td>Options</td>
  </tr>
</table>

Passenger can display friendly error pages whenever an application fails to start. This friendly error page presents the startup error message, some suggestions for solving the problem, a backtrace and a dump of the environment variables.

This feature is very useful during application development and useful for less experienced system administrators, but the page might reveal potentially sensitive information, depending on the application. For this reason, friendly error pages are disabled by default when [PassengerAppEnv](#passengerappenv) (or its aliases such as `RailsEnv` and `RackEnv`) is set to `staging` or `production`, but enabled by default otherwise. You can use this option to explicitly enable or disable this feature.
