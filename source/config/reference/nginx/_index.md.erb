**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## Essentials

### passenger_root

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_root <em>path</em>;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>2.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http</td>
  </tr>
</table>

Refers to the location to the Passenger root directory, or to a location configuration file. This configuration option is essential to Passenger, and allows Passenger to locate its own data files.

You normally do not need to set this configuration option. If you used our [Debian](<%= url_for "/install/nginx/apt_repo.html" %>) or [RPM](<%= url_for "/install/nginx/yum_repo.html" %>) packages to [install Passenger](<%= url_for "/install/nginx/install/index.html" %>), then they automatically configure `passenger_root` for you with the right value. If you installed Passenger from Homebrew, tarball or RubyGems, then at some point during the installation process you are told what the correct value should be, and instructed to insert it into your Nginx configuration file.

#### What happens if this option is not set, or set wrongly

If you do not set `passenger_root`, Passenger will disable itself, and Nginx will behave as if Passenger was never installed.

If you set `passenger_root` to the wrong value, then Passenger will attempt to locate some of its own files, fail to do so, then complain with an error message and abort Nginx.

#### How to fix passenger_root

If you lost the `passenger_root` configuration value (e.g. because you accidentally removed the Nginx configuration file, and you are trying to reconstruct it), if you didn't follow the installation instructions correctly, or if you [moved Passenger to a different directory](<%= url_for "/install/nginx/moving.html" %>), then you can fix `passenger_root` as follows.

The correct value for `passenger_root` can be obtained as follows:

 * If you installed Passenger through source tarball or by cloning it from the Passenger Github repository, then the value should be the path to the Passenger directory.
 * In all other cases, obtain the correct value by running the following command:

       passenger-config --root

Once you have obtained the value, open your Nginx configuration file and insert a `passenger_root` option somewhere with that value.


## Deployment options

### passenger_enabled

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_enabled <em>on|off</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_enabled off;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>2.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

This option enables or disables Passenger for that particular context. Passenger is disabled by default, so you must explicitly enable it for contexts where you want Passenger to serve your application. Please see [the deployment guide](<%= url_for "/deploy/nginx/index.html" %>) for full examples.

~~~nginx
server {
    listen 80;
    server_name www.example.com;
    root /webapps/example/public;

    # You must explicitly set 'passenger_enabled on', otherwise
    # Phusion Passenger won't serve this app.
    passenger_enabled on;
}
~~~

Note that since version 5.0.0, `passenger_enabled` is inherited into subcontexts. This was not the case in previous versions.


### passenger_base_uri

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_base_uri <em>uri</em>;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>2.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

<!-- TODO: fix link -->
Used to specify that the given URI is an distinct application that should be served by Passenger. Please see [the deployment guide](<%= url_for "/deploy/nginx/index.html" %>) for more information.

It is allowed to specify this option multiple times. Do this to deploy multiple applications in different sub-URIs under the same virtual host.


### passenger_document_root

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_document_root <em>path</em>;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.25</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

<!-- TODO: fix link -->
Used in sub-URI deployment scenarios to tell Passenger where it should look for static files. Please see [the deployment guide](<%= url_for "/deploy/nginx/index.html" %>) for more information.


## Application loading options

### passenger_ruby

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_ruby <em>path-to-ruby-interpreter</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_ruby ruby;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

The `passenger_ruby` option specifies the Ruby interpreter to use for serving Ruby web applications.

In addition, the `passenger_ruby` option in the `http` context also specifies which Ruby interpreter to use for Passenger's internal Ruby helper tools, e.g. the one used by [passenger_pre_start](#passenger_pre_start). See [Lightweight Ruby dependency](<%= url_for "/indepth/lightweight_ruby_dependency.html" %>) for more information about the internal Ruby helper tools.

If `passenger_ruby` is not specified, then it defaults to `ruby`, which means that the first `ruby` command found in [PATH](<%= url_for "/indepth/environment_variables.html" %>#the-path-environment-variable) will be used.

Closely related to `passenger_ruby` is [passenger_python](#passenger_python), [passenger_nodejs](#passenger_nodejs), etc. The following example illustrates how it works and how you can use these options to specify different interpreters for different web apps.

<%= render_partial("/config/reference/nginx/passenger_ruby_example.md", locals: locals) %>

<%= render_partial("/config/reference/passenger_ruby_extra_info.md", locals: locals) %>


### passenger_python

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_python <em>path-to-python-interpreter</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_python python;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

This option specifies the Python interpreter to use for serving Python web applications. If it is not specified, then it uses the first `python` command found in [PATH](<%= url_for "/indepth/environment_variables.html" %>#the-path-environment-variable).

Closely related to this option is [passenger_ruby](#passenger_ruby), [passenger_nodejs](#passenger_nodejs), etc. The following example illustrates how it works and how you can use these options to specify different interpreters for different web apps.

<%= render_partial("/config/reference/nginx/passenger_ruby_example.md", locals: locals) %>


### passenger_nodejs

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_nodejs <em>path-to-node-js</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_nodejs node;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

This option specifies the Node.js/io.js command to use for serving Node.js/io.js web applications. If it is not specified, then it uses the first `node` command found in [PATH](<%= url_for "/indepth/environment_variables.html" %>#the-path-environment-variable).

Passenger's support for Node.js and io.js are the same. If you want to use io.js instead of Node.js, simply set this option to your iojs binary.

Closely related to this option is [passenger_ruby](#passenger_ruby), [passenger_python](#passenger_python), etc. The following example illustrates how it works and how you can use these options to specify different interpreters for different web apps.

<%= render_partial("/config/reference/nginx/passenger_ruby_example.md", locals: locals) %>


### passenger_meteor_app_settings <filename>

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_nodejs <em>path-to-node-js</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_nodejs node;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>5.0.7</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

When using a Meteor application in non-bundled mode, use this option to specify a JSON file with settings for the application. The `meteor run` command will be run with the `--settings` parameter set to this option.

Note that this option is not intended to be used for bundled/packaged Meteor applications. When running bundled/packaged Meteor applications on Passenger, you should set the `METEOR_SETTINGS` environment variable using [passenger_env_var](#passenger_env_var).


### passenger_app_env

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_app_env <em>name</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_app_env production;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

This option sets, for the current application, the value of the following environment variables:

 * `RAILS_ENV`
 * `RACK_ENV`
 * `WSGI_ENV`
 * `NODE_ENV`
 * `PASSENGER_APP_ENV`

Some web frameworks, for example Rails and Connect.js, adjust their behavior according to the value in one of these environment variables.

Passenger sets the default value to **production**. If you're developing the application (instead of running it in production), then you should set this to `development`.

If you want to set other environment variables, please use [passenger_env_var](#passenger_env_var).

Setting this option also adds the application environment name to the default [application group name](#passenger_app_group_name), so that you can run multiple versions of your application with different application environment names.


### rails_env, rack_env

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>
      rails_env <em>name</em>;<br>
      rack_env <em>name</em>;
    </td>
  </tr>
  <tr>
    <th>Default</th>
    <td>
      rails_env production;<br>
      rails_env production;
    </td>
  </tr>
  <tr>
    <th>Since</th>
    <td>2.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

These are aliases for [passenger_app_env](#passenger_app_env).


### passenger_app_root

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_app_root <em>path</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_app_root <em>parent-directory-of-virtual-host-root</em>;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

By default, Passenger assumes that the application's root directory is the parent directory of the virtual host's (`server` block's) root directory. This option allows one to the application's root independently from the virtual host root, which is useful if your application does not follow the conventions that Passenger assumes.

See also [How Passenger + Nginx autodetects applications](<%= url_for "/indepth/app_autodetection/nginx/index.html" %>).

#### Example

~~~nginx
server {
    server_name test.host;
    root /var/rails/zena/sites/example.com/public;
    # normally Phusion Passenger would
    # have assumed that the application
    # root is "/var/rails/zena/sites/example.com"
    passenger_app_root /var/rails/zena;
}
~~~


### passenger_app_group_name

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_app_group_name <em>name</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>See description</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

Sets the name of the application group that the current application should belong to. Its default value is the [application root](#passenger_app_root), plus (if it is explicitly set), the [application environment name](#passenger_app_env).

Passenger stores and caches most application spawning settings -- such as environment variables, process limits, etc -- on a per-app-group-name basis. This means that if you want to start two versions of your application, with each version having different environment variables, then you must assign them under different application group names.

The [request queue](<%= url_for "/indepth/request_queuing.html" %>) is also per-application group, so creating multiple application groups allow you to separate requests into different queues.

#### Example

Consider a situation in which you are running multiple versions of the same app, with each version intended for a different customer. You use the `CUSTOMER_NAME` environment variable to tell the app which customer that version should serve.

~~~ruby
# WRONG example! Doesn't work!

server {
    listen 80;
    server_name customer1.foo.com;
    root /webapps/foo/public;
    passenger_enabled on;
    passenger_env_var CUSTOMER_NAME customer1;
}

server {
    listen 80;
    server_name customer2.foo.com;
    root /webapps/foo/public;
    passenger_enabled on;
    passenger_env_var CUSTOMER_NAME customer2;
}
~~~

This example doesn't work, because Passenger thinks that they are the same application. When a user visits customer1.foo.com, Passenger will start a process with `CUSTOMER_NAME=customer1`. When another user visits customer2.foo.com, Passenger will route the request to the application process that was started earlier. Because environment variables are only set during application process startup, the second user will be served the website for customer 1.

To make this work, assign unique application group names:

~~~ruby
server {
    listen 80;
    server_name customer1.foo.com;
    root /webapps/foo/public;
    passenger_enabled on;
    passenger_env_var CUSTOMER_NAME customer1;
    passenger_app_group_name foo_customer1;
}

server {
    listen 80;
    server_name customer2.foo.com;
    root /webapps/foo/public;
    passenger_enabled on;
    passenger_env_var CUSTOMER_NAME customer2;
    passenger_app_group_name foo_customer2;
}
~~~

Note that it is not necessary to set `passenger_app_group_name` if you want to run two versions of your application under different [application environment names]#(#passenger_app_env), because the application environment name is included in the default application group name. For example, consider a situation in which you want to run a production and a staging version of your application. The following configuration will work fine:

~~~nginx
server {
    listen 80;
    server_name bar.com;
    root /webapps/bar/public;
    passenger_enabled on;
    # Phusion Passenger implicitly sets:
    # passenger_app_group_name /webapps/bar/public;
}

server {
    listen 80;
    server_name staging.com;
    root /webapps/bar/public;
    passenger_enabled on;
    passenger_app_env staging;
    # Phusion Passenger implicitly sets:
    # passenger_app_group_name '/webapps/bar/public (staging)';
}
~~~


### passenger_app_type

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_app_type <em>name</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td><a href="<%= url_for "/indepth/app_autodetection/nginx/index.html" %>">Autodetected</a></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.25</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

By default, Passenger [autodetects](<%= url_for "/indepth/app_autodetection/nginx/index.html" %>) the type of the application, e.g. whether it's a Ruby, Python, Node.js or Meteor app. If it's unable to autodetect the type of the application (e.g. because you've specified a custom [passenger_startup_file](#passenger_startup_file)) then you can use this option to force Passenger to recognize the application as a specific type.

Allowed values are:

<table class="table table-bordered table-striped">
  <thead>
    <th>Value</th>
    <th>Application type</th>
  </thead>
  <tbody>
    <% SUPPORTED_APP_TYPES.each do |spec| %>
      <tr>
        <td><%= spec[:type] %></td>
        <td><%= spec[:name] %></td>
      </tr>
    <% end %>
  </tbody>
</table>

#### Example

~~~nginx
server {
    server_name example.com;
    root /webapps/example.com/public;
    passenger_enabled on;
    # Use server.js as the startup file (entry point file) for
    # your Node.js application, instead of the default app.js
    passenger_startup_file server.js;
    passenger_app_type node;
}
~~~


### passenger_startup_file

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_startup_file <em>relative-path</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td><a href="<%= url_for "/indepth/app_autodetection/nginx/index.html" %>">Autodetected</a></td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.25</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

This option specifies the startup file that Passenger should use when loading the application. This path is relative to the [application root](#passenger_app_root).

Every application has a *startup file* or *entry point file*: a file where the application begins execution. Some languages have widely accepted conventions about how such a file should be called (e.g. Ruby, with its `config.ru`). Other languages have somewhat-accepted conventions (e.g. Node.js, with its `app.js`). In these cases, Passenger reuses these conventions, and executes applications through those files.

Other languages have no conventions at all, and so Passenger invents one (e.g. Python WSGI with `passenger_wsgi.py`).

Here's a list of the language-specific conventions that Phusion Passenger accepts:

<table class="table table-striped table-bordered">
  <thead>
    <tr>
      <th>Language</th>
      <th>Passenger convention</th>
    </tr>
  </thead>
  <tbody>
    <% SUPPORTED_APP_TYPE_CONVENTIONS.each do |spec| %>
      <tr>
        <td><%= spec[:name] %></td>
        <td><%= spec[:startup_file] %></td>
      </tr>
    <% end -%>
  </tbody>
</table>

Sometimes you might not want to adhere to the convention that Passenger accepts. For example, on Node.js, you might want to use `server.js` as the startup file instead of the default `app.js`. With this option, you can customize the startup file to any file you like.

#### Notes

 * Customizing the startup file affects [user account sandboxing](<%= url_for "/deploy/nginx/user_sandboxing.html" %>). After all, if user account sandboxing is enabled, the application is executed as the user that owns the startup file.
 * If you set this option, you **must** also set [passenger_app_type](#passenger_app_type), otherwise Passenger doesn't know what kind of application it is.

#### Example

~~~nginx
server {
    server_name example.com;
    root /webapps/example.com/public;
    passenger_enabled on;
    # Use server.js as the startup file (entry point file) for
    # your Node.js application, instead of the default app.js
    passenger_startup_file server.js;
    passenger_app_type node;
}
~~~


### passenger_spawn_method

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_spawn_method <em>smart|direct</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>
      For Ruby apps: passenger_spawn_method smart;<br>
      For other apps: passenger_spawn_method direct;
    </td>
  </tr>
  <tr>
    <th>Since</th>
    <td>2.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

This option controls whether Passenger spawns applications directly, or using a prefork copy-on-write mechanism. The [spawn methods guide](<%= url_for "/indepth/spawn_methods.html" %>) explains this in detail.


### passenger_env_var

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_env_var <em>name</em> <em>value</em>;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>5.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

Sets environment variables to pass to the application. Environment variables are only set during application loading.

#### Example

~~~nginx
server {
    server_name www.foo.com;
    root /webapps/foo/public;
    passenger_enabled on;

    passenger_env_var DATABASE_USERNAME foo_db;
    passenger_env_var DATABASE_PASSWORD secret;
}
~~~


### passenger_load_shell_envvars

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_load_shell_envvars <em>on|off</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_load_shell_envvars on;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>4.0.20</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
</table>

Enables or disables the loading of shell environment variables before spawning the application.

If this option is turned on, and the user's shell is `bash`, then applications are loaded by running them with `bash -l -c`. The benefit of this is that you can specify environment variables in .bashrc, and they will appear in the application as one would expect.

If this option is turned off, applications are loaded by running them directly from the `Passenger core` process.


### passenger_rolling_restarts

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_rolling_restarts <em>on|off</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_rolling_restarts off;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>3.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
  <%= render_partial("/config/reference/enterprise_only.html") %>
</table>

Enables or disables support for [zero-downtime application restarts](<%= url_for "/deploy/nginx/zero_downtime_redeployments.html" %>) through `restart.txt`. Normally, when you [restart an application](<%= url_for "/admin/nginx/restart_app.html" %>) through `restart.txt`, Passenger would shut down all processes for that application and spawn a new one. The spawning of a new application process could take a while, and any requests that come in during this time will be blocked until this first application process has spawned, which users may experience as "downtime".

But when rolling restarts are enabled, Passenger Enterprise will:

 1. Spawn a new process in the background.
 2. When it's done spawning, Passenger Enterprise will replace one of the old processes with this newly spawned one.
 3. Step 1 and 2 are repeated until all processes have been replaced.

This way, visitors will not experience any delays when you are restarting your application. This allows you to, for example, deploy application updates often without degrading user experience.

Rolling restarts have a few caveat however that you should be aware of:

 * Upgrading an application sometimes involves upgrading the database schema. With rolling restarts, there may be a point in time during which processes belonging to the previous version and processes belonging to the new version both exist at the same time. Any database schema upgrades you perform must therefore be backwards-compatible with the old application version.
 * Because there's no telling which process will serve a request, users may not see changes brought about by the new version until all processes have been restarted. It is for this reason that you should not use rolling restarts in development, only in production.

If Passenger Enterprise could not rolling restart a process (let's call it 'A') because it is unable to spawn a new process (let's call it 'B'), then Passenger Enterprise will give up trying to rolling restart that particular process 'A'. What happens next depends on whether [deployment error resistance](#passengerresistdeploymenterrors) is enabled:

 * If deployment error resistance is disabled (the default), then Passenger Enterprise will proceed with trying to restart the remaining processes.
 * If deployment error resistance is enabled, the Passenger Enterprise will give up rolling restarting immediately. The application group will be put into Deployment Error Resistance Mode.

Please note that `PassengerRollingRestarts` is completely unrelated to the `passenger-config restart-app` command. That command always initiates a blocking restart, unless `--rolling-restart` is given.

NOTE: Are you looking to prevent applications from being restarted when you restart Nginx? That is handled by the [Flying Passenger mode](<%= url_for "/deploy/nginx/flying_passenger.html" %>), not by the rolling restarts feature.


### passenger_resist_deployment_errors

<table class="table table-bordered table-condensed">
  <tr>
    <th>Syntax</th>
    <td>passenger_resist_deployment_errors <em>on|off</em>;</td>
  </tr>
  <tr>
    <th>Default</th>
    <td>passenger_resist_deployment_errors off;</td>
  </tr>
  <tr>
    <th>Since</th>
    <td>3.0.0</td>
  </tr>
  <tr>
    <th>Context</th>
    <td>http, server, location, if</td>
  </tr>
  <%= render_partial("/config/reference/enterprise_only.html") %>
</table>

Enables or disables [resistance against deployment errors](<%= url_for "/deploy/nginx/deployment_error_resistance.html" %>).

Suppose that you have upgraded your application and you have issued a command to restart it, but the application update contains an error (e.g. a syntax error or a database configuration error) that prevents Passenger from successfully spawning a process. Passenger would normally display an error message to the visitor in response to this.

By enabling deployment error resistance, Passenger Enterprise would "freeze" the application's process list. Existing application processes (belonging to the previous version) will be kept around to serve requests. The error is [logged](<%= url_for "/admin/#{integration_mode_type}/log_file.html" %>), but visitors do not see any error messages. Passenger keeps the old processes around until an administrator has taken action. This way, visitors will suffer minimally from deployment errors.

[Learn more about this feature in Deployment Error Resistance guide](<%= url_for "/deploy/nginx/deployment_error_resistance.html" %>).

Note that enabling deployment error resistance only works if you perform a [rolling restart instead of a blocking restart](<%= url_for "/admin/nginx/restart_app.html" %>#blocking-restart-vs-zero-down-time-restart-(rolling-restart)).
