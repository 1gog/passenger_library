---
title: 'Preparing a sample application - Passenger + Meteor basics'
section: basics
subsection: preparing_sample_app
sidebar: toc.html
---
# Preparing a sample application

<p class="lead">Throughout the rest of this basics walkthrough, we will demonstrate Passenger's basic features through a sample Meteor application. In this step we will show you how to create this sample application.</p>

## Create the app

Let us create an example Meteor app directory structure in your home directory. We use the builtin Meteor leaderboard example app. If you have already done this as part of the [quickstart](../../start/meteor.html), feel free to skip to ["Create an app package"](#create-an-app-package).

<pre class="highlight"><span class="prompt">$ </span>cd ~
<span class="prompt">$ </span>meteor create --example leaderboard
<span class="prompt">$ </span>cd leaderboard</pre>

## Create an app package

In the previous step, you only created a Meteor app in development mode. In this walkthrough, we also need a *packaged* version of your Meteor sample app. A packaged Meteor app contains the Meteor runtime and various other necessary things for running a Meteor app in production. Some Passenger features are only compatible with packaged Meteor apps.

Inside the `leaderboard` directory, use the `meteor bundle` command to create a package tarball.

<pre class="highlight"><span class="prompt">$ </span>meteor bundle package.tar.gz</pre>

<div class="info">
  <h3 class="notoc">Why creating a package?</h3>
  <p>
    Wondering why we instruct you to create a package, instead of just using the Meteor app in unpackaged form. Learn more at <a href="<%= url_for "/indepth/meteor.html" %>">About Meteor support</a>.
  </p>
</div>

<div class="note">
  <h3 class="notoc">"meteor bundle" deprecated?</h3>
  <p>
    Meteor will probably tell you that <code>meteor bundle</code> is deprecated in favor of <code>meteor build</code>. Please ignore that message, because for the purpose of running a Meteor web application on Passenger, only `meteor bundle` does what we want.
  </p>
  <p>
    `meteor bundle` creates a packaged web application, in the form of a Node.js web app with the Meteor runtime included. `meteor build` is a more comprehensive tool that not only does what `meteor bundle` does, but also builds iOS and Android app packages. However, Passenger is a web application server, so iOS and Android packages are not relevant to us, which is why we recommend using `meteor bundle` instead of `meteor build`.
  </p>
</div>

The packaged app has now been placed in `package.tar.gz`. But Passenger expects a directory, so let us extract it in `../leaderboard-package`:

<pre class="highlight"><span class="prompt">$ </span>mkdir ../leaderboard-package
<span class="prompt">$ </span>cd ../leaderboard-package
<span class="prompt">$ </span>tar xzf ../leaderboard/package.tar.gz</pre>

The packaged app directory doesn't contain any dependencies, so we need to install them. Run:

<pre class="highlight"><span class="prompt">$ </span>cd bundle/programs/server
<span class="prompt">$ </span>npm install</pre>

Finally, return to the original `leaderboard` app directory:

<pre class="highlight"><span class="prompt">$ </span>cd ../../../../leaderboard</pre>

<div class="info">
  <h3 class="notoc">Meteor package and MongoDB</h3>
  <p>
    During development, the Meteor runtime takes care of starting MongoDB for you. MongoDB is the database engine that Meteor uses.
  </p>
  <p>
    But a packaged Meteor app does not start MongoDB for you. Instead, a packaged Meteor app expects that MongoDB is already running somewhere, and that you tell the app where that MongoDB instance is. In the <a href="process_management.html">Process management</a> section we will show you how to run MongoDB separately and how to tell your app where MongoDB is.
  </p>
</div>

## Next step

Next, we will introduce you to the `passenger` command, which starts your app in Passenger.

<a href="passenger_command.html" class="btn btn-primary btn-lg">Continue &raquo;</a>
