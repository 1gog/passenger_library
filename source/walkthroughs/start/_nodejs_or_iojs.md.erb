<p class="lead">This 5 minute tutorial teaches you to start your application in a Phusion Passenger server. Feel what Passenger is and how it works.</p>

## Install Passenger

Visit [the Passenger download page](https://www.phusionpassenger.com/download#open_source). There are tailor-made, polished installation methods for OS X, Debian/Ubuntu, Heroku, etc. :)

## Running the server

You normally run your app like this, right?

<% if type == :nodejs %>
~~~bash
node yourapp.js
~~~
<% else %>
~~~bash
iojs yourapp.js
~~~
<% end %>

It's similar with Passenger. Instead of `<%= command %>`, you run your app with `passenger start`, but with a few extra command line options:

~~~bash
<% if type == :nodejs -%>
passenger start --app-type node --startup-file yourapp.js
<% else -%>
passenger start --app-type node --nodejs iojs --startup-file yourapp.js
<% end -%>
# => ======= Phusion Passenger Standalone web server started =======
# => PID file: /Users/phusion/myapp/tmp/pids/passenger.3000.pid
# => Log file: /Users/phusion/myapp/log/passenger.3000.log
# => Environment: development
# => Accessible via: http://0.0.0.0:3000/
# => 
# => You can stop Phusion Passenger Standalone by pressing Ctrl-C.
# => ===============================================================
~~~

As you can see in the output, Passenger is now serving your app on [http://0.0.0.0:3000/](http://0.0.0.0:3000/). So if you go to that URL, you will should see your application:

~~~bash
curl http://0.0.0.0:3000/
# => your app's front page HTML
~~~

## Passenger is polyglot

Passenger supports apps in multiple programming languages. That's why you need to specify what language you're using.
<% if type == :nodejs -%>
The `--app-type node` option does just that.
<% else %>
The `--app-type node --nodejs iojs` options do just that.
<% end -%>

## Passenger reverses port binding

Normally,
<% if type == :nodejs -%>
a Node.js
<% else -%>
an io.js
<% end -%>
app binds a server socket on a certain port by calling `listen()` on an `http.Server` object. But when run in Passenger, this control is inversed. The user that invokes the `passenger` command specifies what address and port to listen on, and Passenger makes sure your app does so.

Most of the time, reverse port binding just works. But if your app creates multiple http.Server objects, then you will confuse the reserve port binding system, and you'll have to give it some hints.

We'll cover reverse port binding in [Introduction part 2: reverse port binding](../intro/<%= type %>/port_binding/).

## Logs

Passenger prints its own logs not only to the terminal, but also to a log file. During startup, Passenger tells you what log file it used. This is typically `passenger.XXXX.log`.

There may also be *application* logs, generated either by your app or by the framework you're using. These logs are completely separate from Passenger's own logs. If the application logs are printed to stdout or stderr, then Passenger will display them. Otherwise, it is up to you to manually view application log files, e.g. with the Unix `tail` tool on the corresponding files.

## Stopping the server

There are two ways to stop the server. The first is by pressing Ctrl-C in the terminal.

~~~bash
<% if type == :nodejs -%>
passenger start --app-type node --startup-file yourapp.js
<% else -%>
passenger start --app-type node --nodejs iojs --startup-file yourapp.js
<% end -%>
# => ...
# => (press Ctrl-C here)
# => Stopping web server... done!
~~~

The second way is by starting a seperate terminal, changing the working directory to your application, and running `passenger stop`:

~~~bash
cd /path-to-your-app
passenger stop
~~~

## Conclusion

<p class="hidden-xs"><img src="../../images/award.png" alt="Achievement unlocked. Image taken from https://openclipart.org/detail/60109/award-symbol-by-sheikh_tuhin" class="pull-right"></p>
<p class="visible-xs text-center"><img src="../../images/award.png" alt="Achievement unlocked. Image taken from https://openclipart.org/detail/60109/award-symbol-by-sheikh_tuhin" width="128"></p>

Congratulations! Now that you've passed this tutorial and seen Passenger in action, you may be interested in intermediate-level walkthroughs.

Learn more about Passenger and its features:

<a href="../intro/<%= type %>/" class="btn btn-primary">Read introduction walkthrough &raquo;</a>

Deploy your app to production:

<a href="../deploy/<%= type %>/" class="btn btn-primary">Read deployment walkthrough &raquo;</a>

...or <a href="../..">go back to the front page</a>.
