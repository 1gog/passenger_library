<%
if !needs_install_passenger?(locals)
  raise "walkthroughs/deploy/deploy_app/_nginx_instructions.md.erb assumes that 'needs_install_passenger?' is always true. If it is not the case, please review the logic in that file and modify things appropriately."
end
%>

<%=
result = {}
output = render_partial("/walkthroughs/deploy/deploy_app/preamble.md", locals: locals.merge(result: result))
header_step = result[:header_step]
output
%>

<%
header_step += 1
substep = 0
%>
<%= h2(nil, "#{header_step} Configuring Nginx and Passenger") %>

Now that you are done with transferring your app's code to the server and setting up an environment for your app, it is time to configure Nginx so that Passenger knows how to serve your app.

<% if needs_login_as_app_user_to_prepare_environment?(locals) %>
<% substep += 1 %>
<%= h3(nil, "#{header_step}.#{substep} Go back to the admin account") %>

You have previously logged into your app's user account in order to prepare the app's environment. That user does not have sudo access. In the next steps, you need to edit configuration files, for which sudo access is needed. So you need to switch back to the admin account.

This can be done by simply exiting the shell that was logged into the app's user account. You will then be dropped back to the admin account. For example:

<pre class="highlight"><span class="c"># This is what you previously ran:</span>
<span class="output">admin$ sudo -u myappuser -H bash -l
myappuser$ ...</span>

<span class="c"># Type `exit` to go back to the account you were before</span>
<span class="prompt">myappuser$ </span>exit
<span class="prompt">admin$</span> _</pre>
<% end %>

<% substep += 1 %>
<%= h3(nil, "#{header_step}.#{substep} Edit Nginx configuration file") %>

<% if os_config_class == :debian || os_config_class == :redhat %>
  <p>
    We need to create an Nginx configuration file and setup a virtual host entry that points to your app. This virtual host entry tells Nginx (and Passenger) where your app is located.
  </p>
  <pre class="highlight"><span style="prompt">$ </span>sudo nano /etc/nginx/sites-enabled/<span class="o">myapp</span>.conf</pre>
  <p>
    Replace <code>myapp</code> with your app's name.
  </p>
  <p>
    Put this inside the file:
  </p>
<% else %>
  <p>
    We need to edit your Nginx configuration file and setup a virtual host entry that points to your app. This virtual host entry tells Nginx (and Passenger) where your app is located.
  </p>
  <p>
    The location of the Nginx configuration file depends on <a href="install_passenger.html#using_nginx">the Nginx installation prefix you chose while installing Passenger</a>. Assuming you installed Nginx to the default prefix <code>/opt/nginx</code>, you need to open /opt/nginx/conf/nginx.conf:
  </p>
  <pre class="highlight"><span style="prompt">$ </span>sudo nano /opt/nginx/conf/nginx.conf</pre>
  <p>
    Let us add a virtual host entry at the end of that file. At the end of the file, insert:
  </p>
<% end %>

<% if language_type == :nodejs %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/var/www/myapp/code</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    <span class="c"># Tell Passenger that your app is a Node.js app</span>
    passenger_app_type node;
    passenger_startup_file <span class="o">app.js</span>;
}</pre>

  Replace `yourserver.com` with your server's host name, replace `/var/www/myapp/code` with your application's code directory path and replace `app.js` with your app's entry point file.
<% elsif language_type == :iojs %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/var/www/myapp/code</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    <span class="c"># Tell Passenger that your app is an io.js app</span>
    passenger_app_type node;
    passenger_startup_file <span class="o">app.js</span>;
    passenger_node /usr/bin/iojs;
}</pre>

  Replace `yourserver.com` with your server's host name, replace `/var/www/myapp/code` with your application's code directory path and replace `app.js` with your app's entry point file.

  This configuration also assumes that the io.js binary is located in `/usr/bin/iojs`. If this is not the case, please specify the full path to the io.js binary.
<% elsif language_type == :meteor %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/var/www/myapp/bundle</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    <span class="c"># Tell Passenger that your app is a Meteor app</span>
    passenger_app_type node;
    passenger_startup_file main.js;

    <span class="c"># Tell your app where MongoDB is</span>
    passenger_env_var MONGO_URL mongodb://localhost:27017/<span class="o">myappdb</span>;
    <span class="c"># Tell your app what its root URL is</span>
    passenger_env_var ROOT_URL <span class="o">http://yourserver.com</span>;
}</pre>

  Replace `yourserver.com` with your server's host name and replace `/var/www/myapp/bundle` with your application's package directory path. Replace `myappdb` with an appropriate MongoDB database name. Also be sure to set `ROOT_URL` to an appropriate value.
<% else %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/var/www/myapp/code</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
}</pre>

  Replace `yourserver.com` with your server's host name, and replace `/var/www/myapp/code` with your application's code directory path. However, make sure that Nginx is configured to point to the `public` subdirectory inside it!
<% end %>

When you are done, restart Nginx:

<% if os_config_class == :debian || os_config_class == :redhat %>
  <pre class="highlight"><span style="prompt">$ </span>sudo service nginx restart</pre>
<% else %>
  <pre class="highlight"><span style="prompt">$ </span>sudo <span class="nb">kill</span> <span class="k">$(</span>cat /opt/nginx/logs/nginx.pid<span class="k">)</span>
<span style="prompt">$ </span>sudo /opt/nginx/sbin/nginx</pre>
  <p>(<a href="install_passenger.html#restarting_nginx">Learn more about restarting Nginx</a>)</p>
<% end %>

<% substep += 1 %>
<%= h3(nil, "#{header_step}.#{substep} Test drive") %>

You should now be able to access your app through the server's host name! Try running this from your local computer. Replace `yourserver.com` with your server's hostname, exactly as it appears in the Nginx config file's `server_name` directive.

<pre class="highlight"><span class="prompt">$ </span>curl http://yourserver.com/
<span class="output">...your app's front page HTML...</span></pre>
