<%=
result = {}
output = render_partial("/walkthroughs/deploy/deploy_app/preamble.md", locals: locals.merge(result: result))
header_step = result[:header_step]
output
%>

<%
header_step += 1
substep = 0
%>
<%= h2(nil, "#{header_step} Configuring Apache and Passenger") %>

Now that you are done with transferring your app's code to the server and setting up an environment for your app, it is time to configure Apache so that Passenger knows how to serve your app.

<% if needs_login_as_app_user_to_prepare_environment?(locals) %>
<% substep += 1 %>
<%= h3(nil, "#{header_step}.#{substep} Go back to the admin account") %>

You have previously logged into your app's user account in order to prepare the app's environment. That user does not have sudo access. In the next steps, you need to edit configuration files, for which sudo access is needed. So you need to switch back to the admin account.

This can be done by simply exiting the shell that was logged into the app's user account. You will then be dropped back to the admin account. For example:

<pre class="highlight"><span class="c"># This is what you previously ran:</span>
<span class="output">admin$ sudo -u myappuser -H bash -l
myappuser$ ...</span>

<span class="c"># Type `exit` to go back to the account you were before</span>
<span class="prompt">myappuser$ </span>exit
<span class="prompt">admin$</span> _</pre>
<% end %>

<% substep += 1 %>
<%= h3(nil, "#{header_step}.#{substep} Edit Apache configuration file") %>

<% if os_config_class == :debian || os_config_class == :redhat %>
  <p>
    We need to create an Apache configuration file and setup a virtual host entry that points to your app. This virtual host entry tells Apache (and Passenger) where your app is located.
  </p>
  <pre class="highlight"><span style="prompt">$ </span>sudo nano /etc/nginx/sites-enabled/<span class="o">myapp</span>.conf</pre>
  <p>
    Replace <code>myapp</code> with your app's name.
  </p>
  <p>
    Put this inside the file:
  </p>
<% else %>
  <p>
    We need to edit your Apache configuration file and setup a virtual host entry that points to your app. This virtual host entry tells Apache (and Passenger) where your app is located.
  </p>
  <p>
    Open your Apache configuration file. For example:
  </p>
  <pre class="highlight"><span style="prompt">$ </span>sudo nano /etc/apache2/apache2.conf</pre>
  <p>
    Don't know where your Apache configuration file is? Read <a href="<%= url_for "/indepth/working_with_the_apache_config_file.html" %>">Working with the Apache configuration file</a>.
  </p>
  <p>
    Let us add a virtual host entry at the end of that file. At the end of the file, insert:
  </p>
<% end %>

<% if language_type == :python %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's code directory is</span>
    DocumentRoot <span class="o">/var/www/myapp/code</span>/public
    PassengerAppRoot <span class="o">/var/www/myapp/code</span>

    <span class="c"># Tell Passenger that your app is a <%= language_name %> app</span>
    PassengerAppType python
    PassengerStartupFile <span class="o">passenger_wsgi.py</span>

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/var/www/myapp/code</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache >= 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name, replace `/var/www/myapp/code` with your application's code directory path and replace `passenger_wsgi.py` with your app's WSGI entry point file.
<% elsif language_type == :nodejs %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's code directory is</span>
    DocumentRoot <span class="o">/var/www/myapp/code</span>/public
    PassengerAppRoot <span class="o">/var/www/myapp/code</span>

    <span class="c"># Tell Passenger that your app is a <%= language_name %> app</span>
    PassengerAppType node
    PassengerStartupFile <span class="o">app.js</span>

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/var/www/myapp/code</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache >= 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name, replace `/var/www/myapp/code` with your application's code directory path and replace `app.js` with your app's entry point file.
<% elsif language_type == :iojs %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's code directory is</span>
    DocumentRoot <span class="o">/var/www/myapp/code</span>/public
    PassengerAppRoot <span class="o">/var/www/myapp/code</span>

    <span class="c"># Tell Passenger that your app is an io.js app</span>
    PassengerAppType node
    PassengerStartupFile <span class="o">app.js</span>
    PassengerNode /usr/bin/iojs

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/var/www/myapp/code</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache >= 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name, replace `/var/www/myapp/code` with your application's code directory path and replace `app.js` with your app's entry point file.

  This configuration also assumes that the io.js binary is located in `/usr/bin/iojs`. If this is not the case, please specify the full path to the io.js binary.
<% elsif language_type == :meteor %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's code directory is</span>
    DocumentRoot <span class="o">/var/www/myapp/bundle</span>/public
    PassengerAppRoot <span class="o">/var/www/myapp/bundle</span>

    <span class="c"># Tell Passenger that your app is a bundled Meteor app</span>
    PassengerAppType node
    PassengerStartupFile main.js

    <span class="c"># Tell your app where MongoDB is</span>
    SetEnv MONGO_URL mongodb://localhost:27017/<span class="o">myappdb</span>
    <span class="c"># Tell your app what its root URL is</span>
    SetEnv ROOT_URL <span class="o">http://www.yourserver.com</span>

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/var/www/myapp/code</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache >= 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name and replace `/var/www/myapp/bundle` with your application's code directory path. Replace `myappdb` with an appropriate MongoDB database name. Also be sure to set `ROOT_URL` to an appropriate value.
<% else %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's 'public' directory is</span>
    DocumentRoot <span class="o">/var/www/myapp/code</span>/public

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/var/www/myapp/code</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache >= 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name, and replace `/var/www/myapp/code` with your application's code directory path. However, make sure that Apache is configured to point to the `public` subdirectory inside it!
<% end %>

When you are done, restart Apache:

<pre class="highlight"><span class="prompt">$ </span>sudo apachectl restart</pre>

(Depending on your operating system, the right command may be `apache2ctl` instead of `apachectl`.)

<% substep += 1 %>
<%= h3(nil, "#{header_step}.#{substep} Test drive") %>

You should now be able to access your app through the server's host name! Try running this from your local computer. Replace `yourserver.com` with your server's hostname, exactly as it appears in the Apache config file's `ServerName` directive.

<pre class="highlight"><span class="prompt">$ </span>curl http://yourserver.com/
<span class="output">...your app's front page HTML...</span></pre>
